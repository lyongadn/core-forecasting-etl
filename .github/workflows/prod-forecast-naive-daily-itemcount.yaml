name: prod-forecast-naive-daily-itemcount

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag/Version to deploy to Prod'
        required: true

env:
  ENVIRONMENT: prod

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: load cfacorp actions
      uses: actions/checkout@v2
      with:
        repository: cfacorp/github-actions
        ref: master
        token: ${{ secrets.READONLY_GITHUB_TOKEN }}
        path: .github/private-actions
    - name: env-loader
      uses: ./.github/private-actions/env-loader
      with:
        env-file: ./core-forecast-daily/core-forecast-naive-daily-itemcount/manifest.yaml
        filter: base,${{ env.ENVIRONMENT }}
    - run: |
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
    - if: startsWith( ${{ env.VERSION }}, "v" )
      run: |
        echo "VERSION=${VERSION/v}" >> $GITHUB_ENV
    outputs:
      env: ${{ toJson(env) }}
      account: ${{ env.ACCOUNT }}
  # Create/Update ECS Task  
  deploy:
    name: Deploy
    env: ${{ fromJson(needs.init.outputs.env) }} # Setting env to env output from previous job
    needs: [init]
    runs-on: ${{ needs.init.outputs.account }} # Specifying which runner to run on
    steps:
    - uses: chick-fil-a/gha-clear-workspace@v1
    - name: Set env vars
      run: |
        echo "BUCKET=$(aws sts get-caller-identity --query Account --output text)-us-east-1-deploy" >> $GITHUB_ENV
        echo "LAMBDA_ARTIFACT=${{ env.NAME }}/${{ env.VERSION }}/${{ env.SRC_DIR }}-${{ env.VERSION }}.zip" >> $GITHUB_ENV
    - name: Download Artifacts
      run: |
        curl --silent --show-error --fail -LO -v -u ${{ secrets.ARTIFACTORY_CREDS }} ${{ env.ARTIFACTORY_URL }}/${{ env.ARTIFACTORY_REPO }}/${{ env.NAME }}/${{ env.VERSION }}/${{ env.SRC_DIR }}-${{ env.VERSION }}.zip
        curl --silent --show-error --fail -LO -v -u ${{ secrets.ARTIFACTORY_CREDS }} ${{ env.ARTIFACTORY_URL }}/${{ env.ARTIFACTORY_REPO }}/${{ env.NAME }}/${{ env.VERSION }}/cloudformation.yaml
    - name: Upload Lambda Code
      run: |
        aws s3api create-bucket --bucket ${{ env.BUCKET }}  # Creates bucket if it doesn't exist
        aws s3 cp ${{ env.SRC_DIR }}-${{ env.VERSION }}.zip s3://${{ env.BUCKET }}/${{ env.LAMBDA_ARTIFACT }}
        aws s3 cp cloudformation.yaml s3://${{ env.BUCKET }}/${{ env.NAME }}/${{ env.VERSION }}/cloudformation.yaml
    - name: Deploy Cloudformation
      uses: chikin-4x/aws-cloudformation-github-deploy@master
      with:
        name: ${{ env.NAME }}
        template: cloudformation.yaml
        capabilities: CAPABILITY_NAMED_IAM
        parameter-overrides: >
          Name=${{ env.NAME }},
          Environment=${{ env.ENVIRONMENT }},
          Bucket=${{ env.BUCKET }},
          LambdaArtifact=${{ env.LAMBDA_ARTIFACT }}
        tags: |
          SystemTag: ${{ env.SYSTEM_TAG }}
          Environment: ${{ env.ENVIRONMENT }}
    # Checkout cfacorp github actions
    - name: load cfacorp actions
      uses: actions/checkout@v2
      with:
        repository: cfacorp/github-actions
        ref: master
        token: ${{ secrets.READONLY_GITHUB_TOKEN }}
        path: .github/private-actions
    # Create change request
    - name: ServiceNow Change Request
      if: env.SERVICENOW_CREATE_CHANGE != 'false'
      uses: ./.github/private-actions/servicenow-change-request
      with:
          project-name: ${{ env.NAME }}
          system-tag: ${{ env.SYSTEM_TAG }}
          user-group: ${{ env.SERVICENOW_USER_GROUP }}
          sn-username: ${{ secrets.SERVICENOW_USERNAME }}
          sn-password: ${{ secrets.SERVICENOW_PASSWORD }}
















# name: Deploy to Prod

# on:
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Tag/Version to deploy to Prod'
#         required: true

# env:
#   ENVIRONMENT: prod

# jobs:
#   init:
#     name: Init
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: load cfacorp actions
#       uses: actions/checkout@v2
#       with:
#         repository: cfacorp/github-actions
#         ref: master
#         token: ${{ secrets.READONLY_GITHUB_TOKEN }}
#         path: .github/private-actions
#     - name: env-loader
#       uses: ./.github/private-actions/env-loader
#       with:
#         env-file: ./manifest.yaml
#         filter: base,${{ env.ENVIRONMENT }}
#     - run: |
#         echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
#     - if: startsWith( ${{ env.VERSION }}, "v" )
#       run: |
#         echo "VERSION=${VERSION/v}" >> $GITHUB_ENV
#     outputs:
#       env: ${{ toJson(env) }}
#       account: ${{ env.ACCOUNT }}
#   # Create/Update ECS Task
#   deploy:
#     name: Deploy
#     env: ${{ fromJson(needs.init.outputs.env) }} # Setting env to env output from previous job
#     needs: [init]
#     runs-on: ${{ needs.init.outputs.account }} # Specifying which runner to run on
#     steps:
#     - uses: chick-fil-a/gha-clear-workspace@v1
#     - name: Set env vars
#       run: |
#         echo "BUCKET=$(aws sts get-caller-identity --query Account --output text)-us-east-1-deploy" >> $GITHUB_ENV
#         echo "LAMBDA_ARTIFACT=${{ env.NAME }}/${{ env.VERSION }}/${{ env.SRC_DIR }}-${{ env.VERSION }}.zip" >> $GITHUB_ENV
#     - name: Download Artifacts
#       run: |
#         curl --silent --show-error --fail -LO -v -u ${{ secrets.ARTIFACTORY_CREDS }} ${{ env.ARTIFACTORY_URL }}/${{ env.ARTIFACTORY_REPO }}/${{ env.NAME }}/${{ env.VERSION }}/${{ env.SRC_DIR }}-${{ env.VERSION }}.zip
#         curl --silent --show-error --fail -LO -v -u ${{ secrets.ARTIFACTORY_CREDS }} ${{ env.ARTIFACTORY_URL }}/${{ env.ARTIFACTORY_REPO }}/${{ env.NAME }}/${{ env.VERSION }}/cloudformation.yaml
#     - name: Bucket search
#       run: |
#         echo "BUCKET_SEARCH=$(aws s3api head-bucket --bucket ${{ env.BUCKET }} 2>&1 | grep -o '404\|403') " >> $GITHUB_ENV
#     - name: Create bucket
#       if: contains(env.BUCKET_SEARCH, '40')
#       run: |
#         aws s3api create-bucket --bucket ${{ env.BUCKET }}
#     - name: Upload Lambda Code
#       run: |
#         aws s3 cp ${{ env.SRC_DIR }}-${{ env.VERSION }}.zip s3://${{ env.BUCKET }}/${{ env.LAMBDA_ARTIFACT }}
#         aws s3 cp cloudformation.yaml s3://${{ env.BUCKET }}/${{ env.NAME }}/${{ env.VERSION }}/cloudformation.yaml
#     - name: Deploy Cloudformation
#       uses: chikin-4x/aws-cloudformation-github-deploy@master
#       with:
#         name: ${{ env.NAME }}
#         template: cloudformation.yaml
#         capabilities: CAPABILITY_NAMED_IAM
#         parameter-overrides: |
#           Name: ${{ env.NAME }}
#           Environment: ${{ env.ENVIRONMENT }}
#           Bucket: ${{ env.BUCKET }}
#           LambdaArtifact: ${{ env.LAMBDA_ARTIFACT }}
#         tags: |
#           SystemTag: ${{ env.SYSTEM_TAG }}
#           Environment: ${{ env.ENVIRONMENT }}
#     # Checkout cfacorp github actions
#     - name: load cfacorp actions
#       uses: actions/checkout@v2
#       with:
#         repository: cfacorp/github-actions
#         ref: master
#         token: ${{ secrets.READONLY_GITHUB_TOKEN }}
#         path: .github/private-actions
#     # Create change request
#     - name: ServiceNow Change Request
#       if: env.SERVICENOW_CREATE_CHANGE != 'false'
#       uses: ./.github/private-actions/servicenow-change-request
#       with:
#           project-name: ${{ env.NAME }}
#           system-tag: ${{ env.SYSTEM_TAG }}
#           user-group: ${{ env.SERVICENOW_USER_GROUP }}
#           sn-username: ${{ secrets.SERVICENOW_USERNAME }}
#           sn-password: ${{ secrets.SERVICENOW_PASSWORD }}
